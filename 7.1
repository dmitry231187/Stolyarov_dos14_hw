ux@adm-p2:~$ ./71 add 4 1
5

ux@adm-p2:~$ ./71 add 4
вводите данные правильно!
образец:
./71.sh действие число1 число2
примеры:
./71.sh sub 4 2
./71.sh mult 4 2

ux@adm-p2:~$ echo $?
1

ux@adm-p2:~$ cat 71
#!/bin/bash
# вывод примера использования и завершение выполнения с кодом 1
usage() {
 echo -e "вводите данные правильно!\nобразец:\n./71.sh действие число1 число2\nпримеры:\n./71.sh sub 4 2\n./71.sh mult 4 2\n"
 exit 1
}

# проверка на принадлежность к числам (ps. с отрицанием не хочет работать)
isNum() {
 if [[ "$1" =~ [[:digit:]] ]]; then
  echo >/dev/null
else
 usage
 fi
}

errors() {
# проверяем наличие исходных данных и запрашиваем их если нету.
if [[ -z $* ]]; then
 read -p 'Введите первое число: ' num1
 read -p 'Введите второе число: ' num2
 read -p 'Введите желаемое действие (add -- сложение, sub -- вычитание, div -- деление, mult -- умножение): ' action
elif [[ (-z $1) || (-z $2) || (-z $3) ]]; then
 usage
else
 action=$1
 num1=$2
 num2=$3
fi
# проверяем введенные данные на числа
isNum "$num1"
isNum "$num2"

# проверяем деление на 0
if [[ ($action == "div") && ($num2 -eq 0) ]]; then
 read -p 'Нельзя делить на 0! Введите правильный делитель (любое число кроме 0): ' num2
 if [[ $num2 -eq 0 ]]; then
  usage
 fi
fi
}

# функция вычисления
fAct() {
echo $(bc <<< "scale=2;($num1$act$num2)")
}

main() {
# проверяем на ошибки
errors "$@"
#в зависимости от того какое выбрано дейсвтвие делаем нужное вычисление
case "$action" in
add) act="+"; fAct;;
sub) act="-"; fAct;;
div) act="/"; fAct;;
mult) act="*"; fAct;;
*) usage;;
esac
}

main "$@"
